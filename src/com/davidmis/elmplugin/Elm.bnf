{
  parserClass="com.davidmis.elmplugin.parser.ElmParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Elm"
  psiImplClassSuffix="Impl"
  psiPackage="com.davidmis.elmplugin.psi"
  psiImplPackage="com.davidmis.elmplugin.psi.impl"

  elementTypeHolderClass="com.davidmis.elmplugin.psi.ElmTypes"
  elementTypeClass="com.davidmis.elmplugin.psi.ElmElementType"
  tokenTypeClass="com.davidmis.elmplugin.psi.ElmTokenType"
}

elmFile ::= (declaration|statement|COMMENT|CRLF|WHITESPACE|WAITING)*

declaration ::= IDENTIFIER WHITESPACE? COLON WHITESPACE? declaration_lhs

declaration_lhs ::= IDENTIFIER (WHITESPACE? ARROW WHITESPACE? declaration_lhs)*

statement ::= assignment | import_statement
assignment ::= IDENTIFIER WHITESPACE? EQUALS WHITESPACE? expression
import_statement ::= IMPORT WHITESPACE library_name
library_name ::= IDENTIFIER (DOT IDENTIFIER)* WHITESPACE? library_list?
library_list ::= LPAREN WHITESPACE? DOTDOT WHITESPACE? RPAREN

expression ::= if_ex | simple_ex
simple_ex ::= function_application|IDENTIFIER|NUMBER|STRING
function_application ::= IDENTIFIER WHITESPACE (IDENTIFIER|STRING|NUMBER|function_application)
if_ex ::= IF WHITESPACE expression WHITESPACE THEN WHITESPACE expression WHITESPACE ELSE WHITESPACE expression

property ::= (KEY? SEPARATOR VALUE?) | KEY

reserved ::= IF | THEN | ELSE | CASE | OF | LET | IN | DATA | TYPE | MODULE |
             WHERE  | IMPORT |  AS | HIDING | OPEN | EXPORT | FOREIGN